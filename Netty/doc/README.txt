1.NETTY的优点
  1.1 API使用简单，开发门槛低
  1.2 功能强大，预置了多种编码、解码功能，支持多种主流协议
  1.3 强定制能力，可以通过对ChannelHandler对通讯框架进行灵活拓展
  1.4 性能高，与其他NIO框架相比，Netty的综合性能最优
  1.5 成熟稳定，修复了JDK NIO中已经修复的BUG
  1.6 社区活跃，版本迭代周期短


2. IO操作并非是物理设备级别的读写操作，而是缓存的复制。（底层操作系统--内核缓冲区--进程缓冲区--（read，write））

  2.1 同步阻塞IO(Blocking IO)  内核IO操作彻底完成后，才返回用户空间执行用户操作。阻塞指的是用户空间程序的执行状态。
    2.1.1 阻塞的原理：用户空间发起read时，开始阻塞，内存空间开始准备数据，然后复制到用户缓冲区，内核返回后，阻塞结束
    2.1.2 优点：程序开发简单，用户线程基本不占用CPU资源
    2.1.3 缺点：每个连接分配一个线程，高并发下，需要大量的线程来维护网络连接，内存、线程切换会非常巨大。
    
  2.2 同步非阻塞NIO(Non-blocking IO) 用户空间程序不需要等待内核IO操作彻底完成，可以立即返回用户空间执行用户操作（可通过Linux系统设置）
    2.2.1 原理：发起read时，没有内核缓冲区没有数据，系统会返回一个调用失败信息，需要循环调用获取最终数据（用户线程可以做其他操作，所以非阻塞），内核数据复制到用户缓冲区时，用户线程阻塞
    2.2.2 优点：每次发起IO系统调用，用户线程不会阻塞，实时性好，
    2.2.3 缺点：不断轮询内核，这将占用大量的CPU时间，效率底下，同样不适用于高并发
    
  2.3 IO多路复用(IO Multiplexing) 经典的Reactor反应器设计模式，也称异步阻塞IO（Linux系统的多路分离的系统调用select/epoll）  
    2.3.1 原理：read的操作目标socket网络连接提前注册到select/epoll选择器中（对应java中的Selector类），然后轮询连接的就绪状态（可读，可写等）,用户线程获取调用了select查询方法就会阻塞（等待就绪事件）。获取就绪状态的列表，发起read系统调用时，用户线程阻塞。然后复制到用户缓冲区，内核返回后，阻塞结束。
    2.3.2 优点：一个选择器查询线程可以处理成千上万个连接，系统没必要创建大量的线程，也不需要维护这些线程，大大减小了系统开销。NIO（New IO）就是多路复用模型Linux系统上使用的时epoll系统调用
    2.3.3 缺点：本质上select/epoll系统时阻塞式的，属于同步IO，由系统调用本身进行读写，读写过程时阻塞的
    
  2.4 异步IO(Asynchronous IO)，也称为信号驱动IO， 用户空间和内核空间的调用方式反过来，内核空间成了主动调用者
    2.4.1 原理：用户线程通过系统调用，向内核注册某个IO操作，内核在整个IO操作（数据准备，数据复制）完成后，通知用户程序执行后续的业务操作（用户线程不需要阻塞）
    2.4.2 优点：异步输入输出，吞吐量高于多路复用模型的吞吐量
    2.4.3 缺点：应用程序仅需要进行事件的注册与接受，其他工作由系统完成，需要底层内核提供支持，目前底层仍使用epoll，因此实际在性能上相对于多路复用模型没有明显的优势
    

3. 句柄数：文件描述符，通常是一个非负整数，用于指代被一个进程打开的文件。IO系统调用，socket的调用都是通过文件描述符完成的。（系统会有句柄数限制，Linux默认1024，意味着，同一时间只能由1024个连接，ulimit -n  句柄数或修改/etc/security/limit.conf）

4. NIO三大核心组件（Buffer缓冲区、Channel通道、Selector选择器） 
  4.1 Buffer缓冲区的使用
  4.2 Channel 表示一个连接，JAVA中对不同的网络传输协议类型，都有不同的NIO Channel实现
  
    

    
    
    
    
    
    
    
    
    